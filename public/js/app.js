/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var sparticles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sparticles */ \"./node_modules/.pnpm/sparticles@1.3.1/node_modules/sparticles/dist/sparticles.mjs\");\n/* harmony import */ var count_it_down__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! count-it-down */ \"./node_modules/.pnpm/count-it-down@1.0.0/node_modules/count-it-down/dist/count-it-down.umd.js\");\n/* harmony import */ var count_it_down__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(count_it_down__WEBPACK_IMPORTED_MODULE_1__);\n\n\nnew sparticles__WEBPACK_IMPORTED_MODULE_0__[\"default\"](document.querySelector('.landing'), {\n  'composition': 'source-over',\n  'count': 400,\n  'speed': 0.1,\n  'parallax': 3,\n  'direction': 0,\n  'xVariance': 150,\n  'yVariance': 100,\n  'rotate': true,\n  'rotation': 1,\n  'alphaSpeed': 5,\n  'alphaVariance': 1,\n  'minAlpha': 0,\n  'maxAlpha': 0.5,\n  'minSize': 1,\n  'maxSize': 8,\n  'style': 'fill',\n  'bounce': false,\n  'drift': 1.6,\n  'glow': 14,\n  'twinkle': true,\n  'color': ['#be0818', '#e18814'],\n  'shape': 'diamond',\n  'imageUrl': ''\n});\n(function textEffect() {\n  var $textEffect = document.querySelector('[x-target=\"letter-effect\"]');\n  if (!$textEffect) return;\n  var toInnerSpan = function toInnerSpan(el) {\n    return el === ' ' ? ' ' : \"<span class=\\\"letter-effect__element\\\">\".concat(el, \"</span>\");\n  };\n  $textEffect.innerHTML = $textEffect.innerHTML.split('').map(toInnerSpan).join('');\n})();\n(function countdownToLotus() {\n  var lotusDate = new Date(2023, 2, 14, 19, 0, 0, 0);\n  var $countdown = document.querySelector('[x-target=\"countdown\"]');\n\n  // countItDown(lotusDate, ({ days, hours, minutes, seconds }) => {\n  //     $countdown.innerHTML = `\n  //         <span class=\"countdown__element\">${days}</span>\n  //         <span class=\"countdown__element\">${hours}</span>\n  //         <span class=\"countdown__element\">${minutes}</span>\n  //         <span class=\"countdown__element\">${seconds}</span>\n  //     `.trim()\n  // })\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBbUM7QUFDSTtBQUV2QyxJQUFJQSxrREFBVSxDQUFDRSxRQUFRLENBQUNDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFDN0M7RUFDSSxhQUFhLEVBQUUsYUFBYTtFQUM1QixPQUFPLEVBQUUsR0FBRztFQUNaLE9BQU8sRUFBRSxHQUFHO0VBQ1osVUFBVSxFQUFFLENBQUM7RUFDYixXQUFXLEVBQUUsQ0FBQztFQUNkLFdBQVcsRUFBRSxHQUFHO0VBQ2hCLFdBQVcsRUFBRSxHQUFHO0VBQ2hCLFFBQVEsRUFBRSxJQUFJO0VBQ2QsVUFBVSxFQUFFLENBQUM7RUFDYixZQUFZLEVBQUUsQ0FBQztFQUNmLGVBQWUsRUFBRSxDQUFDO0VBQ2xCLFVBQVUsRUFBRSxDQUFDO0VBQ2IsVUFBVSxFQUFFLEdBQUc7RUFDZixTQUFTLEVBQUUsQ0FBQztFQUNaLFNBQVMsRUFBRSxDQUFDO0VBQ1osT0FBTyxFQUFFLE1BQU07RUFDZixRQUFRLEVBQUUsS0FBSztFQUNmLE9BQU8sRUFBRSxHQUFHO0VBQ1osTUFBTSxFQUFFLEVBQUU7RUFDVixTQUFTLEVBQUUsSUFBSTtFQUNmLE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFDZixTQUFTLENBQUM7RUFDZCxPQUFPLEVBQUUsU0FBUztFQUNsQixVQUFVLEVBQUU7QUFDaEIsQ0FBQyxDQUFDO0FBRU4sQ0FBQyxTQUFTQyxVQUFVLEdBQUk7RUFDcEIsSUFBTUMsV0FBVyxHQUFHSCxRQUFRLENBQUNDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQztFQUV4RSxJQUFJLENBQUNFLFdBQVcsRUFBRTtFQUVsQixJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBVyxDQUFHQyxFQUFFO0lBQUEsT0FBSUEsRUFBRSxLQUFLLEdBQUcsR0FBRyxHQUFHLG9EQUEyQ0EsRUFBRSxZQUFTO0VBQUE7RUFDaEdGLFdBQVcsQ0FBQ0csU0FBUyxHQUFHSCxXQUFXLENBQUNHLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDQyxHQUFHLENBQUNKLFdBQVcsQ0FBQyxDQUFDSyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ3JGLENBQUMsR0FBRztBQUVKLENBQUMsU0FBU0MsZ0JBQWdCLEdBQUk7RUFFMUIsSUFBTUMsU0FBUyxHQUFHLElBQUlDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDcEQsSUFBTUMsVUFBVSxHQUFHYixRQUFRLENBQUNDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQzs7RUFFbkU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQUVKLENBQUMsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAuanM/Y2VkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3BhcnRpY2xlcyBmcm9tICdzcGFydGljbGVzJ1xuaW1wb3J0IGNvdW50SXREb3duIGZyb20gJ2NvdW50LWl0LWRvd24nXG5cbm5ldyBTcGFydGljbGVzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sYW5kaW5nJyksXG4gICAge1xuICAgICAgICAnY29tcG9zaXRpb24nOiAnc291cmNlLW92ZXInLFxuICAgICAgICAnY291bnQnOiA0MDAsXG4gICAgICAgICdzcGVlZCc6IDAuMSxcbiAgICAgICAgJ3BhcmFsbGF4JzogMyxcbiAgICAgICAgJ2RpcmVjdGlvbic6IDAsXG4gICAgICAgICd4VmFyaWFuY2UnOiAxNTAsXG4gICAgICAgICd5VmFyaWFuY2UnOiAxMDAsXG4gICAgICAgICdyb3RhdGUnOiB0cnVlLFxuICAgICAgICAncm90YXRpb24nOiAxLFxuICAgICAgICAnYWxwaGFTcGVlZCc6IDUsXG4gICAgICAgICdhbHBoYVZhcmlhbmNlJzogMSxcbiAgICAgICAgJ21pbkFscGhhJzogMCxcbiAgICAgICAgJ21heEFscGhhJzogMC41LFxuICAgICAgICAnbWluU2l6ZSc6IDEsXG4gICAgICAgICdtYXhTaXplJzogOCxcbiAgICAgICAgJ3N0eWxlJzogJ2ZpbGwnLFxuICAgICAgICAnYm91bmNlJzogZmFsc2UsXG4gICAgICAgICdkcmlmdCc6IDEuNixcbiAgICAgICAgJ2dsb3cnOiAxNCxcbiAgICAgICAgJ3R3aW5rbGUnOiB0cnVlLFxuICAgICAgICAnY29sb3InOiBbJyNiZTA4MTgnLFxuICAgICAgICAgICAgJyNlMTg4MTQnXSxcbiAgICAgICAgJ3NoYXBlJzogJ2RpYW1vbmQnLFxuICAgICAgICAnaW1hZ2VVcmwnOiAnJ1xuICAgIH0pO1xuXG4oZnVuY3Rpb24gdGV4dEVmZmVjdCAoKSB7XG4gICAgY29uc3QgJHRleHRFZmZlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbeC10YXJnZXQ9XCJsZXR0ZXItZWZmZWN0XCJdJylcblxuICAgIGlmICghJHRleHRFZmZlY3QpIHJldHVyblxuXG4gICAgY29uc3QgdG9Jbm5lclNwYW4gPSBlbCA9PiBlbCA9PT0gJyAnID8gJyAnIDogYDxzcGFuIGNsYXNzPVwibGV0dGVyLWVmZmVjdF9fZWxlbWVudFwiPiR7ZWx9PC9zcGFuPmBcbiAgICAkdGV4dEVmZmVjdC5pbm5lckhUTUwgPSAkdGV4dEVmZmVjdC5pbm5lckhUTUwuc3BsaXQoJycpLm1hcCh0b0lubmVyU3Bhbikuam9pbignJylcbn0pKCk7XG5cbihmdW5jdGlvbiBjb3VudGRvd25Ub0xvdHVzICgpIHtcblxuICAgIGNvbnN0IGxvdHVzRGF0ZSA9IG5ldyBEYXRlKDIwMjMsIDIsIDE0LCAxOSwgMCwgMCwgMClcbiAgICBjb25zdCAkY291bnRkb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW3gtdGFyZ2V0PVwiY291bnRkb3duXCJdJylcblxuICAgIC8vIGNvdW50SXREb3duKGxvdHVzRGF0ZSwgKHsgZGF5cywgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMgfSkgPT4ge1xuICAgIC8vICAgICAkY291bnRkb3duLmlubmVySFRNTCA9IGBcbiAgICAvLyAgICAgICAgIDxzcGFuIGNsYXNzPVwiY291bnRkb3duX19lbGVtZW50XCI+JHtkYXlzfTwvc3Bhbj5cbiAgICAvLyAgICAgICAgIDxzcGFuIGNsYXNzPVwiY291bnRkb3duX19lbGVtZW50XCI+JHtob3Vyc308L3NwYW4+XG4gICAgLy8gICAgICAgICA8c3BhbiBjbGFzcz1cImNvdW50ZG93bl9fZWxlbWVudFwiPiR7bWludXRlc308L3NwYW4+XG4gICAgLy8gICAgICAgICA8c3BhbiBjbGFzcz1cImNvdW50ZG93bl9fZWxlbWVudFwiPiR7c2Vjb25kc308L3NwYW4+XG4gICAgLy8gICAgIGAudHJpbSgpXG4gICAgLy8gfSlcblxufSkoKTtcbiJdLCJuYW1lcyI6WyJTcGFydGljbGVzIiwiY291bnRJdERvd24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0RWZmZWN0IiwiJHRleHRFZmZlY3QiLCJ0b0lubmVyU3BhbiIsImVsIiwiaW5uZXJIVE1MIiwic3BsaXQiLCJtYXAiLCJqb2luIiwiY291bnRkb3duVG9Mb3R1cyIsImxvdHVzRGF0ZSIsIkRhdGUiLCIkY291bnRkb3duIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./node_modules/.pnpm/count-it-down@1.0.0/node_modules/count-it-down/dist/count-it-down.umd.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/count-it-down@1.0.0/node_modules/count-it-down/dist/count-it-down.umd.js ***!
  \*****************************************************************************************************/
/***/ (function(module) {

eval("!function(e,t){ true?module.exports=t():0}(this,function(){return function(e,t){void 0===t&&(t=function(){});var n=e instanceof Date?e.getTime():new Date(e).getTime(),o=window.requestIdleCallback||function(e){return setTimeout(e,0)};return window.setInterval(function(){return o(function(){var e=(new Date).getTime(),o=n-e;t({days:Math.floor(o/864e5),hours:Math.floor(o%864e5/36e5),minutes:Math.floor(o%36e5/6e4),seconds:Math.floor(o%6e4/1e3)})})},1e3)}});\n//# sourceMappingURL=count-it-down.umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnBucG0vY291bnQtaXQtZG93bkAxLjAuMC9ub2RlX21vZHVsZXMvY291bnQtaXQtZG93bi9kaXN0L2NvdW50LWl0LWRvd24udW1kLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsS0FBb0Qsb0JBQW9CLENBQWlFLENBQUMsaUJBQWlCLHFCQUFxQiwyQkFBMkIsRUFBRSxvR0FBb0csd0JBQXdCLHFDQUFxQyxvQkFBb0IsaUNBQWlDLEdBQUcscUhBQXFILEVBQUUsRUFBRSxPQUFPO0FBQ3JqQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3VudC1pdC1kb3duQDEuMC4wL25vZGVfbW9kdWxlcy9jb3VudC1pdC1kb3duL2Rpc3QvY291bnQtaXQtZG93bi51bWQuanM/ZmMxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTplLmNvdW50SXREb3duPXQoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe3ZvaWQgMD09PXQmJih0PWZ1bmN0aW9uKCl7fSk7dmFyIG49ZSBpbnN0YW5jZW9mIERhdGU/ZS5nZXRUaW1lKCk6bmV3IERhdGUoZSkuZ2V0VGltZSgpLG89d2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2t8fGZ1bmN0aW9uKGUpe3JldHVybiBzZXRUaW1lb3V0KGUsMCl9O3JldHVybiB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtyZXR1cm4gbyhmdW5jdGlvbigpe3ZhciBlPShuZXcgRGF0ZSkuZ2V0VGltZSgpLG89bi1lO3Qoe2RheXM6TWF0aC5mbG9vcihvLzg2NGU1KSxob3VyczpNYXRoLmZsb29yKG8lODY0ZTUvMzZlNSksbWludXRlczpNYXRoLmZsb29yKG8lMzZlNS82ZTQpLHNlY29uZHM6TWF0aC5mbG9vcihvJTZlNC8xZTMpfSl9KX0sMWUzKX19KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50LWl0LWRvd24udW1kLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/count-it-down@1.0.0/node_modules/count-it-down/dist/count-it-down.umd.js\n");

/***/ }),

/***/ "./resources/css/app.scss":
/*!********************************!*\
  !*** ./resources/css/app.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL2FwcC5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9jc3MvYXBwLnNjc3M/NzYzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/css/app.scss\n");

/***/ }),

/***/ "./node_modules/.pnpm/sparticles@1.3.1/node_modules/sparticles/dist/sparticles.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/sparticles@1.3.1/node_modules/sparticles/dist/sparticles.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**!\n * Sparticles - Lightweight, High Performance Particles in Canvas\n * @version 1.3.1\n * @license MPL-2.0\n * @author simeydotme <simey.me@gmail.com>\n * @website http://sparticlesjs.dev\n * @repository https://github.com/simeydotme/sparticles.git\n */\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n/**\n * Limited Animation Frame method, to allow running\n * a given handler at the maximum desired frame rate.\n * inspired from https://gist.github.com/addyosmani/5434533\n * @param {Function} handler method to execute upon every frame\n * @param {Number} fps how many frames to render every second\n */\nvar AnimationFrame = function AnimationFrame() {\n  var handler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n  var fps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n  this.fps = fps;\n  this.handler = handler;\n  var renderId = 0;\n  /**\n   * begin the animation loop which is assigned\n   * to the instance in the constructor\n   */\n\n  this.start = function () {\n    var _this = this;\n\n    if (!this.started) {\n      var then = performance.now();\n      var interval = 1000 / this.fps;\n      var tolerance = 0;\n\n      var loop = function loop(now) {\n        var delta = now - then;\n        renderId = requestAnimationFrame(loop);\n\n        if (delta >= interval - tolerance) {\n          _this.handler(delta);\n\n          then = now - delta % interval;\n        }\n      };\n\n      renderId = requestAnimationFrame(loop);\n      this.started = true;\n    }\n  };\n  /**\n   * stop the currently running animation loop\n   */\n\n\n  this.stop = function () {\n    cancelAnimationFrame(renderId);\n    this.started = false;\n  };\n};\n\n/**\n * return the cartesian x/y delta value from a degree\n * eg: 90 (→) = [1,0]\n * @param {Number} angle angle in degrees\n * @returns {Number[]} cartesian delta values\n */\nvar cartesian = function cartesian(angle) {\n  return [Math.cos(radian(angle - 90)), Math.sin(radian(angle - 90))];\n};\n/**\n * clamp the input number to the min/max values\n * @param {Number} value value to clamp between min and max\n * @param {Number} min minimum value possible\n * @param {Number} max maximum value possible\n * @returns {Number} the input num clamped between min/max\n */\n\nvar clamp = function clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return Math.max(min, Math.min(max, value));\n};\n/**\n * return the radian equivalent to a degree value\n * @param {Number} angle angle in degrees\n * @returns {Number} radian equivalent\n */\n\nvar radian = function radian(angle) {\n  return angle * Math.PI / 180;\n};\n/**\n * return random number between a min and max value\n * @param {Number} min minimum value\n * @param {Number} max maximum value\n * @param {Boolean} rounded should the result be rounded\n * @returns {Number} a random number between min and max\n */\n\nvar random = function random() {\n  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.random();\n\n  if (max <= min) {\n    value = min;\n  } else if ((min !== 0 || max !== 1) && max > min) {\n    value = value * (max - min) + min;\n  }\n\n  return value;\n};\n/**\n * return a random value from an array\n * @param {Array} array an array to get random value from\n * @returns {*} random value from array\n */\n\nvar randomArray = function randomArray(array) {\n  return array[Math.floor(random(0, array.length))];\n};\n/**\n * return a random HSL colour string for use in random color effect\n * @returns {String} \"hsl(100,100,80)\"\n */\n\nvar randomHsl = function randomHsl() {\n  var h = round(random(0, 360));\n  var s = round(random(90, 100));\n  var l = round(random(45, 85));\n  return \"hsl(\".concat(h, \",\").concat(s, \"%,\").concat(l, \"%)\");\n};\n/**\n * return a boolean to pass a dice roll\n * @param {Number} odds a fraction to use as the probability, can be supplied as \"1/2\"\n * @returns {Boolean}\n */\n\nvar roll = function roll(odds) {\n  return odds > random();\n};\n/**\n * round a number to the nearest integer value\n * @param {Number} value value to round to the nearest integer\n * @returns {Number} nearest integer\n */\n\nvar round = function round(value) {\n  return 0.5 + value | 0;\n};\n\n/**\n * Sparticle Constructor;\n * creates an individual particle for use in the Sparticles() class\n * @param {Object} parent - the parent Sparticles() instance this belongs to\n * @returns {Object} - reference to a new Sparticle instance\n */\n\nvar Sparticle = function Sparticle(parent) {\n  if (parent) {\n    this.canvas = parent.canvas;\n    this.settings = parent.settings;\n    this.colors = parent.colors;\n    this.shapes = parent.shapes;\n    this.images = parent.images;\n    this.styles = parent.styles;\n    this.ctx = parent.canvas.getContext(\"2d\");\n    this.setup();\n    this.init();\n  } else {\n    console.warn(\"Invalid parameters given to Sparticle()\", arguments);\n  }\n\n  return this;\n};\n/**\n * set up the particle with some random values\n * before it is initialised on the canvas\n * these values will randomize when the particle goes offscreen\n */\n\nSparticle.prototype.setup = function () {\n  var _ = this.settings;\n  this.frame = 0;\n  this.frameoffset = round(random(0, 360));\n  this.size = round(random(_.minSize, _.maxSize));\n  this.da = this.getAlphaDelta();\n  this.dx = this.getDeltaX();\n  this.dy = this.getDeltaY();\n  this.dd = this.getDriftDelta();\n  this.dr = this.getRotationDelta();\n  this.color = this.getColor();\n  this.shape = this.getShape();\n  this.image = this.getImage();\n  this.style = this.getStyle();\n  this.rotation = _.rotate ? radian(random(0, 360)) : 0;\n  this.vertical = _.direction > 150 && _.direction < 210 || _.direction > 330 && _.direction < 390 || _.direction > -30 && _.direction < 30;\n  this.horizontal = _.direction > 60 && _.direction < 120 || _.direction > 240 && _.direction < 300;\n};\n/**\n * initialise a particle with the default values from\n * the Sparticles instance settings.\n * these values do not change when the particle goes offscreen\n */\n\n\nSparticle.prototype.init = function () {\n  var _ = this.settings;\n  var canvas = this.canvas;\n  this.alpha = 0;\n\n  if (_.speed > 0 || _.alphaSpeed === 0) {\n    this.alpha = random(_.minAlpha, _.maxAlpha);\n  }\n\n  if (_.bounce) {\n    this.px = round(random(2, canvas.width - this.size - 2));\n    this.py = round(random(2, canvas.height - this.size - 2));\n  } else {\n    this.px = round(random(-this.size * 2, canvas.width + this.size));\n    this.py = round(random(-this.size * 2, canvas.height + this.size));\n  }\n};\n/**\n * reset the particle after it has gone off canvas.\n * this should be better than popping it from the array\n * and creating a new particle instance.\n */\n\n\nSparticle.prototype.reset = function () {\n  // give the particle a new set of initial values\n  this.setup(); // set the particle's Y position\n\n  if (this.py < 0) {\n    this.py = this.canvas.height + this.size * 2;\n  } else if (this.py > this.canvas.height) {\n    this.py = 0 - this.size * 2;\n  } // set the particle's X position\n\n\n  if (this.px < 0) {\n    this.px = this.canvas.width + this.size * 2;\n  } else if (this.px > this.canvas.width) {\n    this.px = 0 - this.size * 2;\n  }\n};\n/**\n * bounce the particle off the edge of canvas\n * when it has touched\n */\n\n\nSparticle.prototype.bounce = function () {\n  var _ = this.settings;\n  var dir = _.direction; // reverse the particle's Y position\n\n  if (this.py <= 0 || this.py + this.size >= this.canvas.height) {\n    this.dy = -this.dy;\n\n    if (this.horizontal) {\n      this.dd = -this.dd;\n    }\n  } // reverse the particle's X position\n\n\n  if (this.px <= 0 || this.px + this.size >= this.canvas.width) {\n    this.dx = -this.dx;\n\n    if (this.vertical) {\n      this.dd = -this.dd;\n    }\n  }\n};\n/**\n * check if the particle is off the canvas based\n * on it's current position\n * @returns {Boolean} is the particle completely off canvas\n */\n\n\nSparticle.prototype.isOffCanvas = function () {\n  var topleft = 0 - this.size * 2;\n  var bottom = this.canvas.height + this.size * 2;\n  var right = this.canvas.width + this.size * 2;\n  return this.px < topleft || this.px > right || this.py < topleft || this.py > bottom;\n};\n/**\n * check if the particle is touching the canvas edge\n * @returns {Boolean} is the particle touching edge\n */\n\n\nSparticle.prototype.isTouchingEdge = function () {\n  var topleft = 0;\n  var bottom = this.canvas.height - this.size;\n  var right = this.canvas.width - this.size;\n  return this.px < topleft || this.px > right || this.py < topleft || this.py > bottom;\n};\n/**\n * get a random color for the particle from the\n * array of colors set in the options object\n * @returns {String} - random color from color array\n */\n\n\nSparticle.prototype.getColor = function () {\n  if (this.settings.color === \"random\") {\n    return randomArray(this.colors);\n  } else if (Array.isArray(this.settings.color)) {\n    return randomArray(this.settings.color);\n  } else {\n    return this.settings.color;\n  }\n};\n/**\n * get a random shape for the particle from the\n * array of shapes set in the options object\n * @returns {String} - random shape from shape array\n */\n\n\nSparticle.prototype.getShape = function () {\n  if (this.settings.shape === \"random\") {\n    return randomArray(this.shapes);\n  } else if (Array.isArray(this.settings.shape)) {\n    return randomArray(this.settings.shape);\n  } else {\n    return this.settings.shape;\n  }\n};\n/**\n * get the image for the particle from the array\n * of possible image urls\n * @returns {String} - random imageUrl from imageUrl array\n */\n\n\nSparticle.prototype.getImage = function () {\n  if (Array.isArray(this.settings.imageUrl)) {\n    return randomArray(this.settings.imageUrl);\n  } else {\n    return this.settings.imageUrl;\n  }\n};\n/**\n * get the style of the particle, either \"fill\" or \"stroke\"\n * depending on the settings as fill/stroke/both\n * @returns {String} - either \"fill\" or \"stroke\"\n */\n\n\nSparticle.prototype.getStyle = function () {\n  return randomArray(this.styles);\n};\n/**\n * get a random delta (velocity) for the particle\n * based on the speed, and the parallax value (if applicable)\n * @returns {Number} - the velocity to be applied to the particle\n */\n\n\nSparticle.prototype.getDelta = function () {\n  var baseDelta = this.settings.speed * 0.1;\n\n  if (this.settings.speed && this.settings.parallax) {\n    return baseDelta + this.size * this.settings.parallax / 50;\n  } else {\n    return baseDelta;\n  }\n};\n/**\n * get a random variable speed for use as a multiplier,\n * based on the values given in the settings object, this\n * can be positive or negative\n * @returns {Number} - a variable delta speed\n */\n\n\nSparticle.prototype.getDeltaVariance = function () {\n  var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var s = this.settings.speed || 10;\n\n  if (v > 0) {\n    return random(-v, v) * s / 100;\n  } else {\n    return 0;\n  }\n};\n/**\n * get a random delta on the X axis, taking in to account\n * the variance range in the settings object and the particle's\n * direction as a multiplier\n * @returns {Number} - the X delta to be applied to particle\n */\n\n\nSparticle.prototype.getDeltaX = function () {\n  var d = this.getDelta();\n  var dv = this.getDeltaVariance(this.settings.xVariance);\n  return cartesian(this.settings.direction)[0] * d + dv;\n};\n/**\n * get a random delta on the Y axis, taking in to account\n * the variance range in the settings object and the particle's\n * direction as a multiplier\n * @returns {Number} - the Y delta to be applied to particle\n */\n\n\nSparticle.prototype.getDeltaY = function () {\n  var d = this.getDelta();\n  var dv = this.getDeltaVariance(this.settings.yVariance);\n  return cartesian(this.settings.direction)[1] * d + dv;\n};\n/**\n * get a random delta for the alpha change over time from\n * between a positive and negative alpha variance value\n * @returns {Number} - the alpha delta to be applied to particle\n */\n\n\nSparticle.prototype.getAlphaDelta = function () {\n  var variance = this.settings.alphaVariance;\n  var a = random(1, variance + 1);\n\n  if (roll(1 / 2)) {\n    a = -a;\n  }\n\n  return a;\n};\n/**\n * return a random drift value either positive or negative\n * @returns {Number} - the drift value\n */\n\n\nSparticle.prototype.getDriftDelta = function () {\n  if (!this.settings.drift) {\n    return 0;\n  } else {\n    return random(this.settings.drift - this.settings.drift / 2, this.settings.drift + this.settings.drift / 2);\n  }\n};\n/**\n * return a random rotation value either positive or negative\n * @returns {Number} - the rotation value\n */\n\n\nSparticle.prototype.getRotationDelta = function () {\n  var r = 0;\n\n  if (this.settings.rotate && this.settings.rotation) {\n    r = radian(random(0.5, 1.5) * this.settings.rotation);\n\n    if (roll(1 / 2)) {\n      r = -r;\n    }\n  }\n\n  return r;\n};\n/**\n * progress the particle's frame number, as well\n * as the internal values for both the particle's\n * position and the particle's alpha.\n * @returns {Object} - reference to the current Sparticle instance\n */\n\n\nSparticle.prototype.update = function () {\n  this.frame += 1;\n  this.updatePosition();\n  this.updateAlpha();\n  return this;\n};\n/**\n * progress the particle's alpha value depending on the\n * alphaSpeed and the twinkle setting\n * @returns {Number} - new alpha value of the particle\n */\n\n\nSparticle.prototype.updateAlpha = function () {\n  if (this.settings.alphaSpeed > 0) {\n    if (this.settings.twinkle) {\n      this.alpha = this.updateTwinkle();\n    } else {\n      this.alpha = this.updateFade();\n    }\n  }\n\n  return this.alpha;\n};\n/**\n * progress the particle's alpha value according to\n * the fading effect\n * @returns {Number} - new alpha value of the particle\n */\n\n\nSparticle.prototype.updateFade = function () {\n  var tick = this.da / 1000 * this.settings.alphaSpeed * 0.5;\n  var alpha = this.alpha + tick;\n  var over = this.da > 0 && alpha > this.settings.maxAlpha;\n  var under = this.da < 0 && alpha < this.settings.minAlpha; // if the alpha is over or under the min or max values,\n  // then we reverse the delta so that it can increase or\n  // decrease in opacity in the opposite direction\n\n  if (over || under) {\n    this.da = -this.da;\n    alpha = this.settings.maxAlpha;\n\n    if (under) {\n      alpha = this.settings.minAlpha;\n    }\n  }\n\n  return alpha;\n};\n/**\n * progress the particle's alpha value according to\n * the twinkle effect\n * @returns {Number} - new alpha value of the particle\n */\n\n\nSparticle.prototype.updateTwinkle = function () {\n  var alpha = this.alpha;\n  var delta = Math.abs(this.da);\n  var over = alpha > this.settings.maxAlpha;\n  var under = alpha < this.settings.minAlpha;\n  var tick = delta / 1000 * this.settings.alphaSpeed * 0.5;\n  var flickerOn = roll(1 / 30);\n  var flickerOff = roll(1 / 30); // if the particle is resetting the twinkle effect, then\n  // we simply want to quickly get back to max alpha\n  // over a short period of time, otherwise just advance the tick\n\n  if (this.resettingTwinkle) {\n    alpha += tick * 5;\n  } else if (flickerOn) {\n    alpha += tick * 50;\n  } else if (flickerOff) {\n    alpha -= tick * 25;\n  } else {\n    alpha -= tick;\n  } // once the alpha is under the min alpha value, then we need\n  // to set the twinkle effect to reset, and once it is over\n  // the max alpha, we stop resetting.\n\n\n  if (under) {\n    this.resettingTwinkle = true;\n    alpha = this.settings.minAlpha;\n  } else if (over) {\n    this.resettingTwinkle = false;\n    alpha = this.settings.maxAlpha;\n  }\n\n  return alpha;\n};\n/**\n * progress the particle's position values, rotation and drift\n * according to the settings given\n */\n\n\nSparticle.prototype.updatePosition = function () {\n  if (this.settings.bounce && this.isTouchingEdge()) {\n    this.bounce();\n  } else if (this.isOffCanvas()) {\n    this.reset();\n    return;\n  }\n\n  this.px += this.dx;\n  this.py += this.dy; // drift must be applied after position x/y\n  // as it modifies the values by wave function\n\n  this.updateDrift();\n  this.updateRotation();\n};\n/**\n * progress the particle's rotation value according\n * to the settings given\n */\n\n\nSparticle.prototype.updateRotation = function () {\n  if (this.settings.rotate && this.settings.rotation) {\n    this.rotation += this.dr;\n  }\n};\n/**\n * progress the particle's drift value according\n * to the settings given\n */\n\n\nSparticle.prototype.updateDrift = function () {\n  var _ = this.settings;\n  var dir = _.direction;\n\n  if (_.drift && _.speed) {\n    if (this.vertical) {\n      // apply HORIZONTAL drift ~ when \"direction\" is mostly vertical.\n      this.px += cartesian(this.frame + this.frameoffset)[0] * this.dd / (this.getDelta() * 15);\n    } else if (this.horizontal) {\n      // apply VERTICAL drift ~ when \"direction\" is mostly horizontal.\n      this.py += cartesian(this.frame + this.frameoffset)[1] * this.dd / (this.getDelta() * 15);\n    }\n  }\n};\n\nSparticle.prototype.render = function (canvasses) {\n  var particleCanvas;\n\n  if (this.shape !== \"image\") {\n    particleCanvas = canvasses[this.color][this.shape][this.style];\n  } else {\n    particleCanvas = canvasses[this.color][this.shape][this.image];\n  }\n\n  var canvasSize = particleCanvas.width;\n  var scale = this.size / canvasSize;\n  var px = this.px / scale;\n  var py = this.py / scale;\n  this.ctx.globalAlpha = clamp(this.alpha, 0, 1);\n  this.renderRotate();\n  this.ctx.transform(scale, 0, 0, scale, 0, 0);\n  this.ctx.drawImage(particleCanvas, 0, 0, canvasSize, canvasSize, px, py, canvasSize, canvasSize);\n  this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n  return this;\n};\n\nSparticle.prototype.renderRotate = function () {\n  if (this.shape !== \"circle\" && this.settings.rotate) {\n    var centerX = this.px + this.size / 2;\n    var centerY = this.py + this.size / 2;\n    this.ctx.translate(centerX, centerY);\n    this.ctx.rotate(this.rotation);\n    this.ctx.translate(-centerX, -centerY);\n  }\n};\n\n/**\n * Sparticles Constructor;\n * Create a <canvas>, append to the given node, and start the particle effect\n * @param {HTMLElement} [node=document.body] - element to which canvas is appended to\n * @param {Object} [options={}] - settings to use for the particle effect\n * @param {String} [options.composition=source-over] - canvas globalCompositeOperation value for particles\n * @param {Number} [options.count=50] - number of particles on the canvas simultaneously\n * @param {Number} [options.speed=10] - default velocity of every particle\n * @param {Number} [options.parallax=1] - speed multiplier effect for larger particles (0 = none)\n * @param {Number} [options.direction=180] - default direction of particles in degrees (0 = ↑, 180 = ↓)\n * @param {Number} [options.xVariance=2] - random deviation of particles on x-axis from default direction\n * @param {Number} [options.yVariance=2] - random deviation of particles on y-axis from default direction\n * @param {Number} [options.rotate=true] - can particles rotate\n * @param {Number} [options.rotation=1] - default rotational speed for every particle\n * @param {Number} [options.alphaSpeed=10] - rate of change in alpha over time\n * @param {Number} [options.alphaVariance=1] - random deviation of alpha change\n * @param {Number} [options.minAlpha=0] - minumum alpha value of every particle\n * @param {Number} [options.maxAlpha=1] - maximum alpha value of every particle\n * @param {Number} [options.minSize=1] - minimum size of every particle\n * @param {Number} [options.maxSize=10] - maximum size of every particle\n * @param {Boolean} [options.bounce=false] - should the particles bounce off edge of canvas\n * @param {Number} [options.drift=1] - the \"driftiness\" of particles which have a horizontal/vertical direction\n * @param {Number} [options.glow=0] - the glow effect size of each particle\n * @param {Boolean} [options.twinkle=false] - particles to exhibit an alternative alpha transition as \"twinkling\"\n * @param {String} [options.style=fill] - fill style of particles (one of; \"fill\", \"stroke\" or \"both\")\n * @param {(String|String[])} [options.shape=circle] - shape of particles (any of; circle, square, triangle, diamond, line, image) or \"random\"\n * @param {(String|String[])} [options.imageUrl=] - if shape is \"image\", define an image url (can be data-uri, must be square (1:1 ratio))\n * @param {(String|String[])} [options.color=random] - css color as string, or array of color strings (can also be \"random\")\n * @param {Function} [options.randomColor=randomHsl(index,total)] - a custom function for setting the random colors when color=\"random\"\n * @param {Number} [options.randomColorCount=3] - the number of random colors to generate when color is \"random\"\n * @param {Number} [width] - the width of the canvas element\n * @param {Number} [height=width] - the height of the canvas element\n * @returns {Object} - reference to a new Sparticles instance\n */\n\nvar Sparticles = function Sparticles(node, options, width, height) {\n  if (arguments.length >= 1 && !(arguments[0] instanceof HTMLElement)) {\n    options = arguments[0];\n    width = arguments[1];\n    height = arguments[2];\n    node = undefined;\n  }\n\n  if (width && !height) {\n    height = width;\n  }\n\n  var defaults = {\n    alphaSpeed: 10,\n    alphaVariance: 1,\n    bounce: false,\n    color: \"random\",\n    randomColor: randomHsl,\n    randomColorCount: 3,\n    composition: \"source-over\",\n    count: 50,\n    direction: 180,\n    drift: 1,\n    glow: 0,\n    imageUrl: \"\",\n    maxAlpha: 1,\n    maxSize: 10,\n    minAlpha: 0,\n    minSize: 1,\n    parallax: 1,\n    rotate: true,\n    rotation: 1,\n    shape: \"circle\",\n    speed: 10,\n    style: \"fill\",\n    twinkle: false,\n    xVariance: 2,\n    yVariance: 2\n  };\n  this.el = node || document.body;\n  this.settings = _objectSpread2(_objectSpread2({}, defaults), options);\n  this.resizable = !width && !height;\n  this.width = this.resizable ? this.el.clientWidth : width;\n  this.height = this.resizable ? this.el.clientHeight : height;\n  /**\n   * initialise the sparticles instance\n   * @returns {Object} - reference to the Sparticles instance\n   */\n\n  this.init = function () {\n    var _this = this;\n\n    this.sparticles = [];\n    this.colors = this.getColorArray();\n    this.shapes = this.getShapeArray();\n    this.styles = this.getStyleArray();\n    this.imageUrls = this.getImageArray();\n    this.setupMainCanvas();\n    this.setupOffscreenCanvasses(function () {\n      _this.createSparticles();\n\n      _this.start();\n    }); // defer to the default \"handleEvent\" handler\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventListener/handleEvent\n\n    window.addEventListener(\"resize\", this);\n    return this;\n  };\n  /**\n   * handle event for screen resize;\n   * debounce a canvas resize,\n   * reset the particles\n   */\n\n\n  this.handleEvent = function (event) {\n    var _this2 = this;\n\n    if (event.type === \"resize\") {\n      clearTimeout(this.resizeTimer);\n      this.resizeTimer = setTimeout(function () {\n        if (_this2.resizable) {\n          _this2.width = _this2.el.clientWidth;\n          _this2.height = _this2.el.clientHeight;\n\n          _this2.setCanvasSize().resetSparticles();\n        }\n      }, 200);\n    }\n  };\n  /**\n   * start/resume the sparticles animation\n   * @returns {Object} - the Sparticle instance (for chaining)\n   */\n\n\n  this.start = function () {\n    var me = this;\n\n    if (!this.loop) {\n      this.loop = new AnimationFrame(function (t) {\n        me.drawFrame(t);\n      });\n    }\n\n    this.loop.start();\n    return this;\n  };\n  /**\n   * stop/pause the sparticles animation\n   * @returns {Object} - the Sparticle instance (for chaining)\n   */\n\n\n  this.stop = function () {\n    this.loop.stop();\n    return this;\n  };\n  /**\n   * destroy the current instance and free up some memory\n   * @returns {Object} - the Sparticle instance (for chaining)\n   */\n\n\n  this.destroy = function () {\n    // stop the rendering and updating\n    this.stop(); // remove the canvas element from the DOM\n\n    this.el.removeChild(this.canvas); // remove the resize event for this instance\n\n    window.removeEventListener(\"resize\", this); // delete all the properties from the instance\n    // to free up memory\n\n    for (var prop in this) {\n      if (this.hasOwnProperty(prop)) {\n        delete this[prop];\n      }\n    }\n\n    return this;\n  };\n  /**\n   * set the canvas width and height\n   * @param {Number} width - the width of the canvas\n   * @param {Number} height - the height of the canvas\n   * @returns {Object} - the Sparticle instance (for chaining)\n   */\n\n\n  this.setCanvasSize = function (width, height) {\n    if (width) {\n      this.resizable = false;\n    }\n\n    this.width = width || this.width;\n    this.height = height || this.height;\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    return this;\n  };\n  /**\n   * create an array and populate it with new Sparticle instances.\n   * @returns {Array} the array of Sparticle instances\n   */\n\n\n  this.resetSparticles = this.createSparticles = function () {\n    this.sparticles = [];\n    this.ctx.globalCompositeOperation = this.settings.composition;\n\n    for (var i = 0; i < this.settings.count; i++) {\n      this.sparticles.push(new Sparticle(this, i));\n    }\n\n    this.sort();\n    return this.sparticles;\n  };\n  /**\n   * sort the particle array by size so that parallax effect\n   * doesn't appear to have slower/smaller particles in foreground\n   */\n\n\n  this.sort = function () {\n    if (this.settings.parallax) {\n      this.sparticles.sort(function (a, b) {\n        return a.size - b.size;\n      });\n    }\n  }; // initialise the sparticles, and return the instance.\n\n\n  return this.init();\n};\n/**\n * convert the input color to an array if it isn't already\n * @returns {Array} - array of colors for use in rendering\n */\n\n\nSparticles.prototype.getColorArray = function () {\n  var colors = Array.isArray(this.settings.color) ? this.settings.color : [this.settings.color];\n  var isRandom = colors.some(function (c) {\n    return c === \"random\";\n  });\n\n  if (isRandom) {\n    for (var i = 0; i < this.settings.randomColorCount; i++) {\n      colors[i] = this.settings.randomColor(i, this.settings.randomColorCount);\n    }\n  }\n\n  return colors;\n};\n/**\n * convert the input shape to an array if it isn't already\n * @returns {Array} - array of shapes for use in rendering\n */\n\n\nSparticles.prototype.getShapeArray = function () {\n  var shapes = Array.isArray(this.settings.shape) ? this.settings.shape : [this.settings.shape];\n  var isRandom = shapes.some(function (c) {\n    return c === \"random\";\n  });\n\n  if (isRandom) {\n    shapes = [\"square\", \"circle\", \"triangle\"];\n  }\n\n  return shapes;\n};\n/**\n * convert the imageUrl option to an array if it isn't already\n * @returns {Array} - array of image urls for use in rendering\n */\n\n\nSparticles.prototype.getImageArray = function () {\n  return Array.isArray(this.settings.imageUrl) ? this.settings.imageUrl : [this.settings.imageUrl];\n};\n/**\n * convert the input style to an array\n * @returns {Array} - array of styles for use in rendering\n */\n\n\nSparticles.prototype.getStyleArray = function () {\n  var styles = this.settings.style;\n\n  if (styles !== \"fill\" && styles !== \"stroke\") {\n    styles = [\"fill\", \"stroke\"];\n  } else {\n    styles = [styles];\n  }\n\n  return styles;\n};\n/**\n * set up the canvas and bind to a property for\n * access later on, append it to the DOM\n * @returns {HTMLCanvasElement} - the canvas element which was appended to DOM\n */\n\n\nSparticles.prototype.setupMainCanvas = function () {\n  this.canvas = document.createElement(\"canvas\");\n  this.canvas.setAttribute(\"class\", \"sparticles\");\n  this.ctx = this.canvas.getContext(\"2d\");\n  this.setCanvasSize();\n  this.el.appendChild(this.canvas);\n  return this.canvas;\n};\n/**\n * create a new offscreen canvas element for each color & shape\n * combination, so that we can reference it later during render\n * (huge performance gains here)\n * @param {Function} [callback] - function to execute after image loads\n * @returns {HTMLCanvasElement} - the created offscreen canvas\n */\n\n\nSparticles.prototype.setupOffscreenCanvasses = function (callback) {\n  var _this3 = this;\n\n  var colors = this.colors.filter(function (item, index) {\n    return _this3.colors.indexOf(item) === index;\n  });\n  var shapes = this.shapes.filter(function (item, index) {\n    return _this3.shapes.indexOf(item) === index;\n  });\n  var styles = this.styles.filter(function (item, index) {\n    return _this3.styles.indexOf(item) === index;\n  });\n  var imageUrls = this.imageUrls.filter(function (item, index) {\n    return _this3.imageUrls.indexOf(item) === index;\n  });\n  var imageCount = colors.length * imageUrls.length;\n  var canvasCount = colors.length * shapes.length * styles.length;\n  var imagesLoaded = 0;\n  var canvassesCreated = 0;\n  this.canvasses = this.canvasses || {};\n  colors.forEach(function (color) {\n    _this3.canvasses[color] = _this3.canvasses[color] || {};\n    shapes.forEach(function (shape) {\n      _this3.canvasses[color][shape] = _this3.canvasses[color][shape] || {};\n\n      if (shape === \"image\") {\n        imageUrls.forEach(function (imageUrl, i) {\n          var image = new Image();\n          var imageCanvas = document.createElement(\"canvas\");\n          _this3.canvasses[color][shape][imageUrl] = imageCanvas;\n\n          image.onload = function () {\n            imagesLoaded++;\n\n            _this3.drawOffscreenCanvasForImage(image, color, imageCanvas);\n\n            if (callback && imagesLoaded === imageCount) {\n              callback();\n            }\n          };\n\n          image.onerror = function () {\n            console.error(\"failed to load source image: \", imageUrl);\n          };\n\n          image.src = imageUrl;\n        });\n      } else {\n        styles.forEach(function (style) {\n          var canvas = document.createElement(\"canvas\");\n          _this3.canvasses[color][shape][style] = canvas;\n          canvassesCreated++;\n\n          _this3.drawOffscreenCanvas(shape, style, color, canvas);\n\n          if (callback && canvassesCreated === canvasCount) {\n            callback();\n          }\n        });\n      }\n    });\n  });\n};\n/**\n * return the size of the glow effect (shadowBlur) for each particle\n * @param {Number} size - the size of the particle\n * @returns {Number} - the size of the glow/shadow\n */\n\n\nSparticles.prototype.getGlowSize = function (size) {\n  return this.settings.glow;\n};\n/**\n * return the outline or stroke size of each particle\n * @param {Number} size - the size of the particle\n * @returns {Number} - the size of the outline/stroke\n */\n\n\nSparticles.prototype.getLineSize = function (size) {\n  return clamp(size / 20, 1, 5);\n};\n/**\n * return the offscreenCanvas size to generate for\n * @returns {Number} - the maxSize of the offscreen canvas\n */\n\n\nSparticles.prototype.getOffscreenCanvasSize = function () {\n  return clamp(this.settings.maxSize, this.settings.minSize, this.settings.maxSize);\n};\n/**\n * set the fill/stroke style (color & width) for each particle's offscreen canvas\n * @param {CanvasRenderingContext2D} ctx - the canvas context\n * @param {String} color - the color to fill/stroke with\n * @param {Number} lineSize - size/thickness of the stroke\n * @param {String} style - style (either \"fill\" or \"stroke\")\n */\n\n\nSparticles.prototype.renderStyle = function (ctx, color, lineSize, style) {\n  if (style === \"fill\") {\n    ctx.fillStyle = color;\n  } else {\n    ctx.lineWidth = lineSize;\n    ctx.strokeStyle = color;\n  }\n};\n/**\n * set the shadowBlur (glow effect) for each particle's offscreen canvas\n * @param {CanvasRenderingContext2D} ctx - the canvas context\n * @param {String} color - the color to fill/stroke with\n * @param {Number} size - size of the shadow/glow\n */\n\n\nSparticles.prototype.renderGlow = function (ctx, color, size) {\n  var glowSize = this.getGlowSize(size) / 2;\n  ctx.shadowColor = color;\n  ctx.shadowBlur = glowSize;\n};\n/**\n * fill or stroke each particle's offscreen canvas depending on the given setting\n * @param {CanvasRenderingContext2D} ctx - the canvas context\n * @param {String} style - style (either \"fill\" or \"stroke\")\n */\n\n\nSparticles.prototype.renderColor = function (ctx, style, path) {\n  if (style === \"fill\") {\n    if (path) {\n      ctx.fill(path);\n    } else {\n      ctx.fill();\n    }\n  } else {\n    if (path) {\n      ctx.stroke(path);\n    } else {\n      ctx.stroke();\n    }\n  }\n};\n/**\n * pass-through the needed parameters to the offscreen canvas\n * draw function associated with the given shape\n * @param {String} shape -  shape of the canvas to draw (eg: \"circle\")\n * @param {String} style -  style (either \"fill\" or \"stroke\")\n * @param {String} color - the color to fill/stroke with\n * @param {HTMLCanvasElement} canvas - the canvas element\n * @returns {HTMLCanvasElement} - the created offscreen canvas\n */\n\n\nSparticles.prototype.drawOffscreenCanvas = function (shape, style, color, canvas) {\n  return this.offScreenCanvas[shape].call(this, style, color, canvas);\n};\n/**\n * object of shapes to draw\n */\n\n\nSparticles.prototype.offScreenCanvas = {};\n/**\n * create, setup and render an offscreen canvas for a\n * Circle Particle of the given color\n * @param {String} style -  style (either \"fill\" or \"stroke\")\n * @param {String} color - the color to fill/stroke with\n * @param {HTMLCanvasElement} canvas - the canvas element\n * @returns {HTMLCanvasElement} - the created offscreen canvas\n */\n\nSparticles.prototype.offScreenCanvas.circle = function (style, color, canvas) {\n  var ctx = canvas.getContext(\"2d\");\n  var size = this.getOffscreenCanvasSize();\n  var lineSize = this.getLineSize(size);\n  var glowSize = this.getGlowSize(size);\n  var canvasSize = size + lineSize * 2 + glowSize;\n  var shapeSize = style === \"stroke\" ? size - lineSize : size;\n  canvas.width = canvasSize;\n  canvas.height = canvasSize;\n  this.renderGlow(ctx, color, size);\n  this.renderStyle(ctx, color, lineSize, style);\n  ctx.beginPath();\n  ctx.ellipse(canvasSize / 2, canvasSize / 2, shapeSize / 2, shapeSize / 2, 0, 0, 360);\n  this.renderColor(ctx, style);\n  return canvas;\n};\n/**\n * create, setup and render an offscreen canvas for a\n * Square Particle of the given color\n * @param {String} style -  style (either \"fill\" or \"stroke\")\n * @param {String} color - the color to fill/stroke with\n * @param {HTMLCanvasElement} canvas - the canvas element\n * @returns {HTMLCanvasElement} - the created offscreen canvas\n */\n\n\nSparticles.prototype.offScreenCanvas.square = function (style, color, canvas) {\n  var ctx = canvas.getContext(\"2d\");\n  var size = this.getOffscreenCanvasSize();\n  var lineSize = this.getLineSize(size);\n  var glowSize = this.getGlowSize(size);\n  var canvasSize = size + lineSize * 2 + glowSize;\n  var shapeSize = style === \"stroke\" ? size - lineSize : size;\n  canvas.width = canvasSize;\n  canvas.height = canvasSize;\n  this.renderGlow(ctx, color, size);\n  this.renderStyle(ctx, color, lineSize, style);\n  ctx.beginPath();\n  ctx.rect(canvasSize / 2 - shapeSize / 2, canvasSize / 2 - shapeSize / 2, shapeSize, shapeSize);\n  this.renderColor(ctx, style);\n  return canvas;\n};\n/**\n * create, setup and render an offscreen canvas for a\n * Line/Curve Particle of the given color\n * @param {String} style -  style (either \"fill\" or \"stroke\")\n * @param {String} color - the color to fill/stroke with\n * @param {HTMLCanvasElement} canvas - the canvas element\n * @returns {HTMLCanvasElement} - the created offscreen canvas\n */\n\n\nSparticles.prototype.offScreenCanvas.line = function (style, color, canvas) {\n  var ctx = canvas.getContext(\"2d\");\n  var size = this.getOffscreenCanvasSize() * 1.5;\n  var lineSize = this.getLineSize(size);\n  var glowSize = this.getGlowSize(size);\n  var canvasSize = size + lineSize * 2 + glowSize;\n  var startx = canvasSize / 2 - size / 2;\n  var starty = canvasSize / 2 - size / 2;\n  canvas.width = canvasSize;\n  canvas.height = canvasSize;\n  this.renderGlow(ctx, color, size);\n  ctx.lineWidth = lineSize;\n  ctx.strokeStyle = color;\n  ctx.beginPath();\n  ctx.moveTo(startx, starty);\n  ctx.lineTo(startx + size, starty + size);\n  ctx.stroke();\n  ctx.closePath();\n  return canvas;\n};\n/**\n * create, setup and render an offscreen canvas for a\n * Triangle Particle of the given color\n * @param {String} style -  style (either \"fill\" or \"stroke\")\n * @param {String} color - the color to fill/stroke with\n * @param {HTMLCanvasElement} canvas - the canvas element\n * @returns {HTMLCanvasElement} - the created offscreen canvas\n */\n\n\nSparticles.prototype.offScreenCanvas.triangle = function (style, color, canvas) {\n  var ctx = canvas.getContext(\"2d\");\n  var size = this.getOffscreenCanvasSize();\n  var lineSize = this.getLineSize(size);\n  var glowSize = this.getGlowSize(size);\n  var canvasSize = size + lineSize * 2 + glowSize;\n  var shapeSize = style === \"stroke\" ? size - lineSize : size;\n  var height = shapeSize * (Math.sqrt(3) / 2);\n  var startx = canvasSize / 2;\n  var starty = canvasSize / 2 - shapeSize / 2;\n  canvas.width = canvasSize;\n  canvas.height = canvasSize;\n  this.renderGlow(ctx, color, size);\n  this.renderStyle(ctx, color, lineSize, style);\n  ctx.beginPath();\n  ctx.moveTo(startx, starty);\n  ctx.lineTo(startx - shapeSize / 2, starty + height);\n  ctx.lineTo(startx + shapeSize / 2, starty + height);\n  ctx.closePath();\n  this.renderColor(ctx, style);\n  return canvas;\n};\n/**\n * create, setup and render an offscreen canvas for a\n * Diamond Sparkle Particle of the given color\n * @param {String} style -  style (either \"fill\" or \"stroke\")\n * @param {String} color - the color to fill/stroke with\n * @param {HTMLCanvasElement} canvas - the canvas element\n * @returns {HTMLCanvasElement} - the created offscreen canvas\n */\n\n\nSparticles.prototype.offScreenCanvas.diamond = function (style, color, canvas) {\n  var pathSize = 100;\n  var path = new Path2D(\"M43,83.74,48.63,99a1.46,1.46,0,0,0,2.74,0L57,83.74A45.09,45.09,0,0,1,83.74,57L99,51.37a1.46,1.46,0,0,0,0-2.74L83.74,43A45.11,45.11,0,0,1,57,16.26L51.37,1a1.46,1.46,0,0,0-2.74,0L43,16.26A45.11,45.11,0,0,1,16.26,43L1,48.63a1.46,1.46,0,0,0,0,2.74L16.26,57A45.09,45.09,0,0,1,43,83.74Z\");\n  var ctx = canvas.getContext(\"2d\");\n  var size = this.getOffscreenCanvasSize();\n  var lineSize = this.getLineSize(size);\n  var glowSize = this.getGlowSize(size);\n  var canvasSize = size + lineSize * 2 + glowSize;\n  var scale = canvasSize / ((pathSize + glowSize) * 1.1);\n  canvas.width = canvasSize;\n  canvas.height = canvasSize;\n  this.renderGlow(ctx, color, size);\n  this.renderStyle(ctx, color, lineSize / scale, style);\n  ctx.scale(scale, scale);\n  ctx.translate(pathSize * 0.05 + glowSize * 0.5, pathSize * 0.05 + glowSize * 0.5);\n  this.renderColor(ctx, style, path);\n  return canvas;\n};\n/**\n * create, setup and render an offscreen canvas for a\n * Star Particle of the given color\n * @param {String} style -  style (either \"fill\" or \"stroke\")\n * @param {String} color - the color to fill/stroke with\n * @param {HTMLCanvasElement} canvas - the canvas element\n * @returns {HTMLCanvasElement} - the created offscreen canvas\n */\n\n\nSparticles.prototype.offScreenCanvas.star = function (style, color, canvas) {\n  var pathSize = 100;\n  var path = new Path2D(\"M99.86,36.45a2.94,2.94,0,0,0-2.37-2l-31-4.54L52.63,1.64a2.93,2.93,0,0,0-5.26,0L33.51,29.91l-31,4.54a3,3,0,0,0-2.37,2,3,3,0,0,0,.74,3l22.44,22L18,92.55A2.94,2.94,0,0,0,20.91,96a2.86,2.86,0,0,0,1.36-.34L50,81,77.73,95.66a2.91,2.91,0,0,0,3.08-.22A3,3,0,0,0,82,92.55l-5.3-31.07,22.44-22A3,3,0,0,0,99.86,36.45Z\");\n  var ctx = canvas.getContext(\"2d\");\n  var size = this.getOffscreenCanvasSize();\n  var lineSize = this.getLineSize(size);\n  var glowSize = this.getGlowSize(size);\n  var canvasSize = size + lineSize * 2 + glowSize;\n  var scale = canvasSize / ((pathSize + glowSize) * 1.1);\n  canvas.width = canvasSize;\n  canvas.height = canvasSize;\n  ctx.scale(scale, scale);\n  this.renderGlow(ctx, color, size);\n  this.renderStyle(ctx, color, lineSize / scale, style);\n  ctx.translate(pathSize * 0.05 + glowSize * 0.5, pathSize * 0.05 + glowSize * 0.5);\n  this.renderColor(ctx, style, path);\n  return canvas;\n};\n/**\n * create, setup and render an offscreen canvas for a\n * Custom Image Particle of the given color\n * @param {HTMLImageElement} image - the image element that has loaded\n * @param {String} color - the color to fill/stroke with\n * @param {HTMLCanvasElement} canvas - the canvas element\n * @returns {HTMLCanvasElement} - the created offscreen canvas\n */\n\n\nSparticles.prototype.drawOffscreenCanvasForImage = function (image, color, canvas) {\n  var size = image.width;\n  var ctx = canvas.getContext(\"2d\");\n  canvas.width = size;\n  canvas.height = size;\n  ctx.drawImage(image, 0, 0, size, size, 0, 0, size, size);\n  ctx.globalCompositeOperation = \"source-atop\";\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, size, size);\n  return canvas;\n};\n/**\n * - wipe the canvas,\n * - update each sparticle,\n * - render each sparticle\n * - sort so that larger particles on top\n * @returns {Array} the array of Sparticle instances\n */\n\n\nSparticles.prototype.drawFrame = function () {\n  this.ctx.clearRect(0, 0, this.width, this.height);\n\n  for (var i = 0; i < this.sparticles.length; i++) {\n    var sparticle = this.sparticles[i];\n    sparticle.update().render(this.canvasses);\n  }\n\n  this.sort();\n  return this.sparticles;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Sparticles);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/.pnpm/sparticles@1.3.1/node_modules/sparticles/dist/sparticles.mjs\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/css/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;